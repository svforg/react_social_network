{"version":3,"sources":["components/presentational/Profile/Posts/Post/Post.module.scss","components/presentational/Users/User/User.module.scss","components/presentational/Profile/User/User.module.scss","components/presentational/Header/Header.module.scss","components/shared/CustomTextArea/CustomTextArea.module.scss","components/presentational/Sidebar/Sidebar.module.scss","components/presentational/Sidebar/SidebarItem/SidebarItem.module.scss","components/shared/CustomButton/CustomButton.module.scss","App.module.scss","components/presentational/Profile/Posts/Posts.module.scss","components/presentational/Profile/CreatePost/CreatePost.module.scss","components/shared/PreLoader/PreLoader.module.scss","components/presentational/Dialogs/Dialogs.module.scss","components/presentational/Dialogs/Persons/Persons.module.scss","components/presentational/Dialogs/Messages/Messages.module.scss","components/presentational/Dialogs/Messages/CreateMessage/CreateMessage.module.scss","serviceWorker.ts","redux/constats/dialogsConstats.ts","redux/reducers/dialogsReducer.ts","redux/constats/profileConstats.ts","redux/reducers/profileReducer.ts","redux/constats/usersConstats.ts","redux/reducers/usersReducer.ts","redux/constats/authConstats.ts","redux/reducers/authReducer.ts","redux/store.ts","api/server.ts","redux/actions/authActions.ts","redux/thunk/authThunk.ts","components/presentational/Header/Header.tsx","components/containers/Header/HeaderContainer.tsx","components/presentational/Sidebar/SidebarItem/SidebarItem.tsx","components/presentational/Sidebar/Sidebar.tsx","components/containers/Sidebar/SidebarContainer.tsx","redux/actions/profileActions.ts","components/presentational/Profile/Posts/Post/Post.tsx","components/presentational/Profile/Posts/Posts.tsx","components/presentational/Profile/User/User.tsx","components/shared/CustomTextArea/CustomTextArea.tsx","components/shared/CustomButton/CustomButton.tsx","components/presentational/Profile/CreatePost/CreatePost.tsx","components/shared/PreLoader/PreLoader.tsx","components/presentational/Profile/Profile.tsx","redux/thunk/profileThunk.ts","components/containers/Profile/ProfileContainer.tsx","redux/selectors/dialogsSelectors.ts","redux/actions/dialogsActions.ts","components/presentational/Dialogs/Persons/Persons.tsx","components/presentational/Dialogs/Messages/CreateMessage/CreateMessage.tsx","components/presentational/Dialogs/Messages/Messages.tsx","components/presentational/Dialogs/Dialogs.tsx","components/containers/Dialogs/DialogsContainer.tsx","redux/useDispatchHOC.ts","redux/actions/usersActions.ts","redux/thunk/usersThunk.ts","components/presentational/Users/User/User.tsx","components/presentational/Users/Users.tsx","components/containers/Users/UsersContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","DIALOGS_TYPES","PROFILE_TYPES","initialState","persons","id","name","messages","text","messageText","USERS_TYPES","info","userId","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","fullName","lookingForAJob","lookingForAJobDescription","photos","small","large","posts","like","postText","AUTH_TYPES","users","pageSize","totalCount","currentPage","isFetching","followEvent","email","login","isAuth","reducers","combineReducers","dialogs","state","action","type","ADD_DIALOG_MESSAGE","ADD_DIALOG_MESSAGE_TEXT","payload","profile","ADD_PROFILE_POST","postId","ADD_PROFILE_POST_TEXT","SHOW_PROFILE","FOLLOW_USER","stateCopy","newUsers","map","user","followed","UN_FOLLOW_USER","SHOW_NEXT_USERS","Array","isArray","length","SHOW_MORE_USERS","SET_CURRENT_PAGE","page","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOW_EVENT","filter","auth","SET_USER_DATA","data","store","createStore","applyMiddleware","thunkMiddleware","instance","axios","create","baseURL","withCredentials","headers","instanceApi","get","then","response","post","delete","authAC","authTC","fetchAuth","dispatch","a","resultCode","Header","React","memo","props","className","css","header","headerInner","logoLink","href","title","logoImg","src","alt","logoTxt","authBlock","to","HeaderContainer","this","Component","connector","connect","Item","sidebarItem","item","activeClassName","active","slug","Sidebar","sidebar","sidebarElements","index","key","sidebarNav","list","SidebarContainer","addProfilePost","v1","addProfilePostText","showProfile","profileAC","Post","ava","pic","message","likePic","Posts","postElements","User","userSmPhoto","userLgPhoto","backgroundWrapper","background","avatarWrapper","avatar","caption","CustomTextArea","label","restProps","formGroup","labelTitle","inputField","CustomButton","btnClassName","button","button_filled","CreatePost","form","value","onChange","e","currentTarget","onClick","PreLoader","preLoaderCubic","Profile","profileTC","getUserProfile","ProfileContainer","addProfilePostAC","addProfilePostTextAC","params","showProfileAC","withRouter","selectDialogs","Persons","personElements","person","listName","CreateMessage","addDialogMessage","addDialogMessageText","Messages","messageElements","listMessage","Dialogs","DialogsContainer","useSelector","_useDispatch","ActionCreator","useDispatch","usersAC","showMoreUsers","showNextPageUsers","followUser","unFollowUser","setCurrentPage","setTotalCount","toggleIsFetching","fetchingFollowEvent","usersTC","fetchUsers","switchNextPage","items","toggleFollowing","toggle","userStatus","status","btnDisabling","some","card","coverContainer","coverImg","userContainer","userDetails","userImgInner","userImg","disabled","Users","loadNextCallback","loadMoreCallback","propsTotal","propsPageSize","pagesCnt","Math","ceil","pagesIndexes","i","push","pages","pagesIndex","leftColumn","rightColumn","current","Grid","container","xs","spacing","UsersContainer","followUserAC","unFollowUserAC","setCurrentPageAC","App","main","content","path","render","reRenderEntireTree","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8645383c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__esQIH\",\"user\":\"Post_user__27E6_\",\"ava\":\"Post_ava__3Sd8S\",\"pic\":\"Post_pic__yDF7q\",\"message\":\"Post_message__1aFak\",\"like\":\"Post_like__2clFI\",\"likePic\":\"Post_likePic__1x2RJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"User_card__2eiIe\",\"coverContainer\":\"User_coverContainer__91rFB\",\"coverImg\":\"User_coverImg__1J-iC\",\"userContainer\":\"User_userContainer__LWzkR\",\"userDetails\":\"User_userDetails__VLtNa\",\"userImgInner\":\"User_userImgInner__3-4J2\",\"userImg\":\"User_userImg__DGfpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__KM23N\",\"backgroundWrapper\":\"User_backgroundWrapper__PO1rp\",\"background\":\"User_background__2R4C7\",\"info\":\"User_info__iaabJ\",\"avatarWrapper\":\"User_avatarWrapper__Pk5o2\",\"avatar\":\"User_avatar___3-vd\",\"caption\":\"User_caption__1cszM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3m3G0\",\"headerInner\":\"Header_headerInner__3yk2i\",\"logoLink\":\"Header_logoLink__juYOu\",\"logoImg\":\"Header_logoImg__2oGeN\",\"logoTxt\":\"Header_logoTxt__2wDwZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroup\":\"CustomTextArea_formGroup__3RJWb\",\"label\":\"CustomTextArea_label__3ZIbR\",\"labelTitle\":\"CustomTextArea_labelTitle__1Ex6F\",\"inputField\":\"CustomTextArea_inputField__2E8Rk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__3rE6t\",\"list\":\"Sidebar_list__26ARL\",\"sidebarNav\":\"Sidebar_sidebarNav__GsXBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SidebarItem_item__9mBtT\",\"active\":\"SidebarItem_active__2YPWT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__e_uEY\",\"button_filled\":\"CustomButton_button_filled__aIoFU\",\"button_default\":\"CustomButton_button_default__2rUhY\",\"button_light\":\"CustomButton_button_light__2dJ2y\",\"button_blink\":\"CustomButton_button_blink__3Cyjs\",\"sheen\":\"CustomButton_sheen__3G6cb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1Z8BM\",\"content\":\"App_content__n1Y3d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__2zefX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreatePost_form__1vPG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preLoaderCubic\":\"PreLoader_preLoaderCubic__oWykG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs___zDPO\",\"name\":\"Dialogs_name__1xGVI\",\"listMessage\":\"Dialogs_listMessage__1wCxH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listName\":\"Persons_listName__15kDy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listMessage\":\"Messages_listMessage__LD-wK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateMessage_form__1Dpu1\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const ADD_DIALOG_MESSAGE = \"ADD_DIALOG_MESSAGE\";\r\nconst ADD_DIALOG_MESSAGE_TEXT = \"ADD_DIALOG_MESSAGE_TEXT\";\r\n\r\nexport enum DIALOGS_TYPES {\r\n    ADD_DIALOG_MESSAGE,\r\n    ADD_DIALOG_MESSAGE_TEXT,\r\n}","import {DialogsACType} from \"../actions/dialogsActions\";\r\nimport {DIALOGS_TYPES} from \"../constats/dialogsConstats\";\r\n\r\nexport type PersonsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    text: string\r\n}\r\nexport type DialogsType = {\r\n    persons: Array<PersonsType>\r\n    messages: Array<MessagesType>\r\n    messageText: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    persons: [\r\n        {id: 1, name: \"Slavbl4\"},\r\n        {id: 2, name: \"Dimbl4\"},\r\n        {id: 3, name: \"Svetbl4\"},\r\n        {id: 4, name: \"Yambl4\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, text: \"hi from Slavbl4\"},\r\n        {id: 2, text: \"hi from Dimbl4\"},\r\n        {id: 3, text: \"hi from Svetbl4\"},\r\n        {id: 4, text: \"hi from Yambl4\"},\r\n    ],\r\n    messageText: \"\",\r\n};\r\n\r\nexport const dialogsReducer = (state: DialogsType = initialState, action: DialogsACType): DialogsType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case DIALOGS_TYPES.ADD_DIALOG_MESSAGE:\r\n            return state.messageText\r\n                ? {\r\n                    ...state, messageText: \"\",\r\n                    messages: [...state.messages, { id: 5, text: state.messageText }],\r\n                  }\r\n                : state;\r\n\r\n        case DIALOGS_TYPES.ADD_DIALOG_MESSAGE_TEXT:\r\n            return action.payload.messageText\r\n                ? {...state, messageText: action.payload.messageText}\r\n                : state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst prepareString = (string: string) => string.replace(/\\s+/g, ' ').trim();\r\n","const ADD_PROFILE_POST = \"ADD_PROFILE_POST\";\r\nconst ADD_PROFILE_POST_TEXT = \"ADD_PROFILE_POST_TEXT\";\r\nconst SHOW_PROFILE = \"SHOW_PROFILE\";\r\n\r\nexport enum PROFILE_TYPES {\r\n    ADD_PROFILE_POST,\r\n    ADD_PROFILE_POST_TEXT,\r\n    SHOW_PROFILE,\r\n}","\r\nimport {ProfileACType} from \"../actions/profileActions\";\r\nimport {PROFILE_TYPES} from \"../constats/profileConstats\";\r\n\r\nexport type ProfileInfoContactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: any\r\n    twitter: string\r\n    vk: string\r\n    website: any\r\n    youtub?: any\r\n}\r\nexport type ProfileInfoPhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileInfoType = {\r\n    userId: number\r\n    aboutMe: string\r\n    contacts: ProfileInfoContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: ProfileInfoPhotosType\r\n}\r\nexport type ProfilePostType = {\r\n    id: string\r\n    text: string\r\n    like: number\r\n}\r\nexport type ProfileType = {\r\n    info: ProfileInfoType\r\n    posts: Array<ProfilePostType>\r\n    postText: string\r\n}\r\n\r\nlet initialState = {\r\n    info: {\r\n        userId: 1,\r\n        aboutMe: \"string\",\r\n        contacts: {\r\n            facebook: \"facebook.com\",\r\n            github: \"github.com\",\r\n            instagram: \"instagra.com/sds\",\r\n            mainLink: null,\r\n            twitter: \"https://twitter.com/@sdf\",\r\n            vk: \"vk.com/dimych\",\r\n            website: null,\r\n            youtube: null\r\n        },\r\n        fullName: \"string\",\r\n        lookingForAJob: true,\r\n        lookingForAJobDescription: \"string\",\r\n        photos: {\r\n            small: \"string\", large: \"string\"\r\n        }\r\n    },\r\n    posts: [\r\n        {id: \"1\", text: \"Hello world\", like: 10},\r\n        {id: \"2\", text: \"It's first post\", like: 20},\r\n        {id: \"3\", text: \"It's second post\", like: 30},\r\n    ],\r\n    postText: \"\",\r\n};\r\n\r\nexport const profileReducer = (state:ProfileType = initialState, action: ProfileACType): ProfileType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case PROFILE_TYPES.ADD_PROFILE_POST:\r\n            return state.postText\r\n                ? {\r\n                    ...state,\r\n                    postText: \"\",\r\n                    posts: [...state.posts, { id: action.payload.postId, text: state.postText, like: 0 }]\r\n                  }\r\n                : state;\r\n\r\n        case PROFILE_TYPES.ADD_PROFILE_POST_TEXT:\r\n            return action.payload.postText\r\n                ? { ...state, postText: action.payload.postText}\r\n                : state;\r\n\r\n        case PROFILE_TYPES.SHOW_PROFILE:\r\n            return action.payload.info\r\n                ? { ...state, info: {...action.payload.info}}\r\n                : state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//let prepareString = (string: string) => string.replace(/\\s+/g, ' ').trim();\r\n","const SHOW_NEXT_USERS = \"SHOW_NEXT_USERS\";\r\nconst SHOW_MORE_USERS = \"SHOW_MORE_USERS\";\r\nconst FOLLOW_USER = \"FOLLOW_USER\";\r\nconst UN_FOLLOW_USER = \"UN_FOLLOW_USER\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_FOLLOW_EVENT = \"TOGGLE_FOLLOW_EVENT\";\r\n\r\nexport enum USERS_TYPES {\r\n    SHOW_NEXT_USERS,\r\n    SHOW_MORE_USERS,\r\n    FOLLOW_USER,\r\n    UN_FOLLOW_USER,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_COUNT,\r\n    TOGGLE_IS_FETCHING,\r\n    TOGGLE_FOLLOW_EVENT,\r\n}","import {UsersACType} from \"../actions/usersActions\";\r\nimport {USERS_TYPES} from \"../constats/usersConstats\";\r\n\r\nexport type UsersPhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    photos: UsersPhotosType\r\n}\r\nexport type UsersState = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followEvent: any[]\r\n}\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 8,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followEvent: [],\r\n};\r\n\r\nexport const usersReducer = (state: UsersState = initialState, action: UsersACType): UsersState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case USERS_TYPES.FOLLOW_USER: {\r\n            let stateCopy = {...state, users: state.users};\r\n\r\n            let newUsers = stateCopy.users.map(user =>\r\n                (user.id === action.payload.userId) ? {...user, followed: true} : user);\r\n\r\n            return {...stateCopy, users: newUsers};\r\n        }\r\n\r\n        case USERS_TYPES.UN_FOLLOW_USER: {\r\n            let stateCopy = {...state, users: state.users};\r\n\r\n            let newUsers = stateCopy.users.map(user =>\r\n                (user.id === action.payload.userId) ? {...user, followed: false} : user);\r\n\r\n            return {...stateCopy, users: newUsers};\r\n        }\r\n\r\n        case USERS_TYPES.SHOW_NEXT_USERS:\r\n            return Array.isArray(action.payload.users) && action.payload.users.length\r\n                ? {...state, users: [...action.payload.users]}\r\n                : state;\r\n\r\n        case USERS_TYPES.SHOW_MORE_USERS:\r\n            return Array.isArray(action.payload.users) && action.payload.users.length\r\n                ? {...state, users: [...state.users, ...action.payload.users]}\r\n                : state;\r\n\r\n        case USERS_TYPES.SET_CURRENT_PAGE:\r\n            return action.payload.page\r\n                ? {...state, currentPage: action.payload.page}\r\n                : state;\r\n\r\n        case USERS_TYPES.SET_TOTAL_COUNT:\r\n            return action.payload.totalCount\r\n                ? {...state, totalCount: action.payload.totalCount}\r\n                : state;\r\n\r\n        case USERS_TYPES.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.payload.isFetching};\r\n\r\n        case USERS_TYPES.TOGGLE_FOLLOW_EVENT:\r\n            return {\r\n                ...state,\r\n                followEvent: action.payload.isFetching\r\n                    ? [...state.followEvent, action.payload.userId]\r\n                    : state.followEvent.filter(id => id !== action.payload.userId)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n","const SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nexport enum AUTH_TYPES {\r\n    SET_USER_DATA,\r\n}","import {AuthACType} from \"../actions/authActions\";\r\nimport {AUTH_TYPES} from \"../constats/authConstats\";\r\n\r\nexport type AuthType = {\r\n    id: any\r\n    email: any\r\n    login: any\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n};\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: AuthACType): AuthType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case AUTH_TYPES.SET_USER_DATA:\r\n            return  {...state, ...action.payload.data, isAuth: true};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {dialogsReducer} from \"./reducers/dialogsReducer\";\r\nimport {profileReducer} from \"./reducers/profileReducer\";\r\nimport {usersReducer} from \"./reducers/usersReducer\";\r\nimport {authReducer} from \"./reducers/authReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    dialogs: dialogsReducer,\r\n    profile: profileReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4519f0f1-a97a-49f3-afed-93ad76508a7a'\r\n    }\r\n});\r\n\r\nexport const instanceApi = {\r\n    getUsers(currentPage: number, pageSize: any) {\r\n        return instance\r\n            .get(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => response.data)\r\n    },\r\n    followUser(userId: any) {\r\n        return instance\r\n            .post(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    unFollowUser(userId: any){\r\n        return instance\r\n            .delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    signIn(){\r\n        return instance\r\n            .get(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    getUserProfile(userId: any){\r\n        return instance\r\n            .get(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n};\r\n\r\n\r\n","import {AUTH_TYPES} from \"../constats/authConstats\";\r\n\r\nexport type AuthACType =\r\n    ReturnType<typeof setUserData>\r\n\r\nexport const setUserData = (id: any, email: any, login: any) => ({\r\n    type: AUTH_TYPES.SET_USER_DATA,\r\n    payload: {data: {id, email, login}}\r\n} as any);\r\n\r\n\r\nexport const authAC = {\r\n    setUserData\r\n};\r\n","import {instanceApi} from \"../../api/server\";\r\nimport {authAC} from \"../actions/authActions\";\r\n\r\nexport const fetchAuth = () =>\r\n    async (dispatch: any) => {\r\n\r\n        let data = await instanceApi.signIn();\r\n\r\n        if (data.resultCode === 0) {\r\n\r\n            let {\r\n                id,\r\n                email,\r\n                login\r\n            } = data.data;\r\n\r\n            dispatch(authAC.setUserData(id, email, login));\r\n        }\r\n    };\r\n\r\nexport const authTC = {\r\n    fetchAuth,\r\n};","import React from \"react\";\r\nimport css from './Header.module.scss';\r\nimport {AuthType} from \"../../../redux/reducers/authReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderProps = AuthType;\r\n\r\nexport const Header: React.FC<HeaderProps> = React.memo(props => {\r\n\r\n    const {\r\n        id,\r\n        email,\r\n        login,\r\n        isAuth\r\n    } = props;\r\n\r\n    return <header className={css.header}>\r\n        <div className=\"wrapper\">\r\n            <div className={css.headerInner}>\r\n                <a className={css.logoLink}\r\n                   href=\"/\"\r\n                   title=\"Our logo\">\r\n\r\n                    <img className={css.logoImg}\r\n                         src=\"https://vk.com/images/svg_icons/ic_head_logo.svg\"\r\n                         alt=\"Our logo\"/>\r\n\r\n                    <span className={css.logoTxt}>\r\n                    Social\r\n                </span>\r\n                </a>\r\n                <div className={css.authBlock}>\r\n                    {\r\n                        isAuth\r\n                            ? login\r\n                            : <NavLink to={'/login'}>Sign in</NavLink>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n});\r\n","import React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {AuthType} from \"../../../redux/reducers/authReducer\";\r\nimport {authTC} from \"../../../redux/thunk/authThunk\";\r\nimport {Header} from \"../../presentational/Header/Header\";\r\n\r\n\r\nclass HeaderContainer extends React.Component<TProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAuth();\r\n        //запросить свой профиль по id\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        } = this.props;\r\n\r\n        return <Header id={id}\r\n                       email={email}\r\n                       isAuth={isAuth}\r\n                       login={login}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({auth}: { auth: AuthType }): AuthType => {\r\n    return {\r\n        id: auth.id,\r\n        email: auth.email,\r\n        login: auth.login,\r\n        isAuth: auth.isAuth,\r\n    }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    fetchAuth: authTC.fetchAuth\r\n});\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(React.memo(HeaderContainer));\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport css from './SidebarItem.module.scss';\r\nimport {SidebarType} from \"../Sidebar\";\r\n\r\ntype SidebarPropsType = {\r\n    sidebarItem: SidebarType\r\n}\r\n\r\nexport const Item: React.FC<SidebarPropsType> = React.memo( props => {\r\n\r\n    const {sidebarItem} = props;\r\n\r\n    return <li className={css.item}>\r\n        <NavLink activeClassName={css.active} to={sidebarItem.slug}>{sidebarItem.title}</NavLink>\r\n    </li>\r\n});\r\n","import React from \"react\";\r\nimport css from './Sidebar.module.scss';\r\nimport {Item} from \"./SidebarItem/SidebarItem\";\r\n\r\nexport type SidebarType = {\r\n    slug: string\r\n    title: string\r\n}\r\nexport type SidebarPropsType = {\r\n    sidebar: Array<SidebarType>\r\n}\r\n\r\nexport const Sidebar: React.FC<SidebarPropsType> = React.memo(props => {\r\n\r\n    const {sidebar} = props;\r\n\r\n    const sidebarElements = Array.isArray(sidebar) && sidebar.length &&\r\n        sidebar.map((sidebarItem: SidebarType, index: number) => <Item key={index}\r\n                                                                       sidebarItem={sidebarItem}/>\r\n        );\r\n\r\n    return <aside className={css.sidebar}>\r\n        <nav className={css.sidebarNav}>\r\n            <ul className={css.list}>{sidebarElements}</ul>\r\n        </nav>\r\n    </aside>\r\n});\r\n","import React from \"react\";\r\nimport {Sidebar} from \"../../presentational/Sidebar/Sidebar\";\r\n\r\nexport const SidebarContainer: React.FC = () => {\r\n\r\n    const sidebar = [\r\n        {slug: \"/profile\", title: \"Profile\"},\r\n        {slug: \"/dialogs\", title: \"Dialogs\"},\r\n        {slug: \"/users\", title: \"Users\"},\r\n    ];\r\n\r\n    return <Sidebar sidebar={sidebar}/>\r\n};\r\n","import {v1} from \"uuid\";\r\nimport {PROFILE_TYPES} from \"../constats/profileConstats\";\r\nimport {ProfileInfoType} from \"../reducers/profileReducer\";\r\n\r\nexport type ProfileACType =\r\n    ReturnType<typeof addProfilePost>\r\n    | ReturnType<typeof addProfilePostText>\r\n    | ReturnType<typeof showProfile>\r\n\r\n\r\nexport const addProfilePost = () => ({\r\n    type: PROFILE_TYPES.ADD_PROFILE_POST,\r\n    payload: {postId: v1()}\r\n} as any);\r\nexport const addProfilePostText = (postText: string) => ({\r\n    type: PROFILE_TYPES.ADD_PROFILE_POST_TEXT,\r\n    payload: {postText}\r\n} as any);\r\nexport const showProfile = (info: ProfileInfoType) => ({\r\n    type: PROFILE_TYPES.SHOW_PROFILE,\r\n    payload: {info}\r\n} as any);\r\n\r\n\r\nexport const profileAC = {\r\n    addProfilePost,\r\n    addProfilePostText,\r\n    showProfile,\r\n};","import React from \"react\";\r\nimport css from './Post.module.scss';\r\n\r\ntype PostPropsType = {\r\n    text: string\r\n    like: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        text,\r\n        like\r\n    } = props;\r\n\r\n    return <article className={css.post}>\r\n        <div className={css.user}>\r\n            <div className={css.ava}>\r\n                <img className={css.pic}\r\n                     src=\"https://iqonic.design/themes/socialv/html-dark/images/user/01.jpg\"\r\n                     alt=\"Anna Stesha\"/>\r\n            </div>\r\n\r\n            <h5 className={css.name}>Anna Stesha</h5>\r\n        </div>\r\n\r\n        <div className={css.message}>{text}</div>\r\n\r\n        <span className={css.like}>\r\n            <img className={css.likePic}\r\n                 src=\"https://iqonic.design/themes/socialv/html-dark/images/icon/01.png\"\r\n                 alt=\"\"/>\r\n\r\n            <span>{like}</span>\r\n        </span>\r\n    </article>\r\n});\r\n","import React from \"react\";\r\nimport css from './Posts.module.scss';\r\nimport {Post} from \"./Post/Post\";\r\nimport {ProfilePostType} from \"../../../../redux/reducers/profileReducer\";\r\n\r\ntype PostsPropsType = {\r\n    posts: Array<ProfilePostType>\r\n}\r\n\r\nexport const Posts: React.FC<PostsPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        posts\r\n    } = props;\r\n\r\n    const postElements = Array.isArray(posts) && posts.length &&\r\n        posts.map(post => <Post key={post.id}\r\n                                text={post.text}\r\n                                like={post.like}/>\r\n        );\r\n\r\n    return <section className={css.posts}>{postElements}</section>\r\n});\r\n","import React from \"react\";\r\nimport css from './User.module.scss';\r\n\r\ntype UserFCType = {\r\n    info?: any\r\n}\r\nexport const User: React.FC<UserFCType> = props => {\r\n\r\n    const {info} = props;\r\n\r\n\r\n    const userSmPhoto = info.photos.small !== null\r\n        ? info.photos.small\r\n        : \"/react_social_network/images/user/05.jpg\";\r\n\r\n    const userLgPhoto = info.photos.large == null\r\n        ? info.photos.large\r\n        : \"/react_social_network/images/page-img/profile-bg1.jpg\";\r\n\r\n    return <div className={css.user}>\r\n        <div className={css.backgroundWrapper}>\r\n            <img className={css.background}\r\n                 src={userLgPhoto}\r\n                 alt={info.fullName}/>\r\n        </div>\r\n\r\n        <figure className={css.info}>\r\n            <div className={css.avatarWrapper}>\r\n                <img className={css.avatar}\r\n                     src={userSmPhoto}\r\n                     alt={info.fullName}/>\r\n            </div>\r\n\r\n            <figcaption className={css.caption}>\r\n                {info.fullName}\r\n            </figcaption>\r\n        </figure>\r\n    </div>\r\n};\r\n","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\r\nimport css from \"./CustomTextArea.module.scss\";\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement> & {\r\n    label?: string\r\n}\r\n\r\nexport const CustomTextArea: React.FC<DefaultTextAreaPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        label,\r\n        ...restProps\r\n    } = props;\r\n\r\n    return <div className={css.formGroup}>\r\n        <label className={css.label}>\r\n            <span className={css.labelTitle}>{label}</span>\r\n\r\n            <textarea className={css.inputField} {...restProps} />\r\n        </label>\r\n    </div>\r\n});","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport css from \"./CustomButton.module.scss\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\nexport const CustomButton: React.FC<DefaultButtonPropsType> = React.memo(props => {\r\n\r\n    const  {...restProps} = props;\r\n\r\n    const btnClassName = `${css.button} ${css.button_filled}`;\r\n\r\n    return <button className={btnClassName} {...restProps}/>\r\n});\r\n","import React, {ChangeEvent} from \"react\";\r\nimport css from \"./CreatePost.module.scss\";\r\nimport {CustomTextArea} from \"../../../shared/CustomTextArea/CustomTextArea\";\r\nimport {CustomButton} from \"../../../shared/CustomButton/CustomButton\";\r\n\r\ntype CreatePostType = {\r\n    postText: string\r\n    addProfilePost: () => void\r\n    addProfilePostText: (title: string) => void\r\n}\r\n\r\nexport const CreatePost: React.FC<CreatePostType> = React.memo(props => {\r\n\r\n    const {\r\n        postText,\r\n        addProfilePost,\r\n        addProfilePostText,\r\n    } = props;\r\n\r\n    const buttonClickCallback = () => addProfilePost();\r\n    const textAreaChangeCallBack = (e: ChangeEvent<HTMLTextAreaElement>) => addProfilePostText(e.currentTarget.value);\r\n\r\n    return <form className={css.form}>\r\n        <h4 className=\"form-title\">Create Post</h4>\r\n\r\n        <CustomTextArea value={postText}\r\n                        onChange={textAreaChangeCallBack}\r\n                        label=\"Enter post message\"/>\r\n\r\n        <CustomButton onClick={buttonClickCallback}\r\n                      type=\"button\">\r\n            Add post\r\n        </CustomButton>\r\n    </form>\r\n});\r\n","import React from 'react';\r\nimport css from \"./PreLoader.module.scss\";\r\n\r\nexport const PreLoader: React.FC = React.memo(props => {\r\n\r\n    const  {...restProps} = props;\r\n\r\n    return <div className={css.preLoaderCubic} {...restProps}/>\r\n});\r\n","import React from \"react\";\r\nimport {Posts} from \"./Posts/Posts\";\r\nimport {User} from \"./User/User\";\r\nimport {CreatePost} from \"./CreatePost/CreatePost\";\r\nimport {ProfilePostType} from \"../../../redux/reducers/profileReducer\";\r\nimport {PreLoader} from \"../../shared/PreLoader/PreLoader\";\r\n\r\ntype ProfilePropsType = {\r\n    info?: any\r\n    posts: ProfilePostType[]\r\n    postText: string\r\n    addProfilePost: () => void\r\n    addProfilePostText: (title: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo(props => {\r\n\r\n    const {\r\n        info,\r\n        posts,\r\n        postText,\r\n        addProfilePost,\r\n        addProfilePostText,\r\n    } = props;\r\n\r\n    if (!info) return <PreLoader/>;\r\n\r\n    return <>\r\n        <User info={info}/>\r\n\r\n        <CreatePost addProfilePost={addProfilePost}\r\n                    addProfilePostText={addProfilePostText}\r\n                    postText={postText}/>\r\n\r\n        <Posts posts={posts}/>\r\n    </>\r\n});\r\n","import {instanceApi} from \"../../api/server\";\r\nimport {profileAC} from \"../actions/profileActions\";\r\n\r\nexport const getUserProfile = (userId: string) =>\r\n    async (dispatch: any) => {\r\n\r\n        let data = await instanceApi.getUserProfile(userId);\r\n\r\n        dispatch(profileAC.showProfile(data));\r\n    };\r\n\r\nexport const profileTC = {\r\n    getUserProfile,\r\n};","import React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {addProfilePost, addProfilePostText, showProfile} from \"../../../redux/actions/profileActions\";\r\nimport {ProfileType} from \"../../../redux/reducers/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {Profile} from \"../../presentational/Profile/Profile\";\r\nimport {profileTC} from \"../../../redux/thunk/profileThunk\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<RouteComponentProps<ProfileRouterProps> & TProps> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (userId === \"\") userId = \"2\";\r\n\r\n        this.props.getUserProfile(userId);\r\n    }\r\n\r\n    addProfilePost = () => this.props.addProfilePostAC();\r\n    addProfilePostText = (title: string) => this.props.addProfilePostTextAC(title);\r\n\r\n    render() {\r\n\r\n        const {\r\n            info,\r\n            posts,\r\n            postText,\r\n        } = this.props;\r\n\r\n        return <Profile addProfilePostText={this.addProfilePostText}\r\n                        addProfilePost={this.addProfilePost}\r\n                        info={info}\r\n                        posts={posts}\r\n                        postText={postText}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({profile}: { profile: ProfileType }, props: any): ProfileType => {\r\n    return {\r\n        info: profile.info,\r\n        posts: profile.posts,\r\n        postText: profile.postText,\r\n    }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    addProfilePostAC: addProfilePost,\r\n    addProfilePostTextAC: addProfilePostText,\r\n    showProfileAC: showProfile,\r\n    getUserProfile: profileTC.getUserProfile,\r\n});\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\ninterface ProfileRouterProps {\r\n    userId: string;\r\n}\r\n\r\nexport default withRouter(connector(React.memo(ProfileContainer)) as any);\r\n\r\n// import {selectProfile} from \"../../../../redux/selectors/profileSelectors\";\r\n// import {useDispatch} from \"../../../../redux/useDispatchHOC\";\r\n// import {useSelector} from \"react-redux\";\r\n// export const ProfileContainer: React.FC = () => {\r\n//\r\n//     const profile = useSelector(selectProfile);\r\n//     const dispatch = useDispatch();\r\n//\r\n//     const addProfilePost = () => dispatch(addProfilePost());\r\n//     const addProfilePostText = (title: string) => dispatch(addProfilePostText(title));\r\n//\r\n//     return <Profile addProfilePostText={addProfilePostText}\r\n//                     addProfilePost={addProfilePost}\r\n//                     profile={profile}/>\r\n// };","import { IGlobalState } from '../store';\r\n\r\ninterface IRootState extends IGlobalState {}\r\n\r\nexport const selectDialogs = (state: IRootState) => state.dialogs;\r\n","import {DIALOGS_TYPES} from \"../constats/dialogsConstats\";\r\n\r\nexport type DialogsACType =\r\n    ReturnType<typeof addDialogMessageAC>\r\n    | ReturnType<typeof addDialogMessageTextAC>\r\n\r\nexport const addDialogMessageAC = () => ({\r\n    type: DIALOGS_TYPES.ADD_DIALOG_MESSAGE\r\n} as any);\r\nexport const addDialogMessageTextAC = (messageText: string) => ({\r\n    type: DIALOGS_TYPES.ADD_DIALOG_MESSAGE_TEXT,\r\n    payload: {messageText}\r\n} as any);\r\n","import React from \"react\";\r\nimport css from './Persons.module.scss';\r\nimport {PersonsType} from \"../../../../redux/reducers/dialogsReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PersonsPropsType = {\r\n    persons: Array<PersonsType>\r\n}\r\n\r\nexport const Persons: React.FC<PersonsPropsType> = React.memo(props => {\r\n\r\n    const {persons} = props;\r\n\r\n    const personElements = Array.isArray(persons) && persons.length &&\r\n        persons.map((person: PersonsType) =>\r\n            <NavLink key={person.id} to={`/dialogs/${person.id}`}>{person.name}</NavLink>\r\n        );\r\n\r\n    return <div className={css.listName}>{personElements}</div>\r\n});\r\n","import React, {ChangeEvent} from \"react\";\r\nimport css from \"./CreateMessage.module.scss\";\r\nimport {CustomTextArea} from \"../../../../shared/CustomTextArea/CustomTextArea\";\r\nimport {CustomButton} from \"../../../../shared/CustomButton/CustomButton\";\r\n\r\ntype CreateMessageType = {\r\n    messageText: string\r\n    addDialogMessage: () => void\r\n    addDialogMessageText: (messageText: string) => void\r\n}\r\n\r\nexport const CreateMessage: React.FC<CreateMessageType> = React.memo(props => {\r\n\r\n    const {\r\n        messageText,\r\n        addDialogMessage,\r\n        addDialogMessageText,\r\n    } = props;\r\n\r\n    const buttonClickCallback = () => addDialogMessage();\r\n    const textAreaChangeCallBack = (e: ChangeEvent<HTMLTextAreaElement>) => addDialogMessageText(e.currentTarget.value);\r\n\r\n    return <form className={css.form}>\r\n        <h4 className=\"form-title\">Create Post</h4>\r\n\r\n        <CustomTextArea value={messageText}\r\n                        onChange={textAreaChangeCallBack}\r\n                        label=\"Enter post message\"/>\r\n\r\n        <CustomButton onClick={buttonClickCallback}\r\n                      type=\"button\">\r\n            Add message\r\n        </CustomButton>\r\n    </form>\r\n});\r\n","import React from \"react\";\r\nimport css from './Messages.module.scss';\r\nimport {CreateMessage} from \"./CreateMessage/CreateMessage\";\r\nimport {MessagesType} from \"../../../../redux/reducers/dialogsReducer\";\r\n\r\ntype MessagesPropsType = {\r\n    messages: Array<MessagesType>\r\n    addDialogMessage: () => void\r\n    addDialogMessageText: (messageText: string) => void\r\n    messageText: string\r\n}\r\n\r\nexport const Messages: React.FC<MessagesPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        messages,\r\n        addDialogMessage,\r\n        addDialogMessageText,\r\n        messageText\r\n    } = props;\r\n\r\n    const messageElements = Array.isArray(messages) && messages.length &&\r\n        messages.map((message: MessagesType, index: number) =>\r\n            <p key={index}>{message.text}</p>\r\n        );\r\n\r\n    return <div className={css.listMessage}>\r\n        {messageElements}\r\n\r\n        <CreateMessage addDialogMessage={addDialogMessage}\r\n                       addDialogMessageText={addDialogMessageText}\r\n                       messageText={messageText}/>\r\n    </div>\r\n});\r\n","import React from \"react\";\r\nimport css from './Dialogs.module.scss';\r\nimport {Persons} from \"./Persons/Persons\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {DialogsType} from \"../../../redux/reducers/dialogsReducer\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: DialogsType\r\n    addDialogMessage: () => void\r\n    addDialogMessageText: (messageText: string) => void\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        dialogs,\r\n        addDialogMessage,\r\n        addDialogMessageText,\r\n    } = props;\r\n\r\n    return <div className={css.dialogs}>\r\n        <Persons persons={dialogs.persons}/>\r\n\r\n        <Messages addDialogMessage={addDialogMessage}\r\n                  addDialogMessageText={addDialogMessageText}\r\n                  messageText={dialogs.messageText}\r\n                  messages={dialogs.messages}/>\r\n    </div>\r\n});\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectDialogs} from \"../../../redux/selectors/dialogsSelectors\";\r\nimport {useDispatch} from \"../../../redux/useDispatchHOC\";\r\nimport {addDialogMessageAC, addDialogMessageTextAC} from \"../../../redux/actions/dialogsActions\";\r\nimport {Dialogs} from \"../../presentational/Dialogs/Dialogs\";\r\n\r\nexport const DialogsContainer: React.FC = () => {\r\n\r\n    const dialogs = useSelector(selectDialogs);\r\n    const dispatch = useDispatch();\r\n\r\n    const addDialogMessage = () => dispatch(addDialogMessageAC());\r\n    const addDialogMessageText = (title: string) => dispatch(addDialogMessageTextAC(title));\r\n\r\n    return <Dialogs addDialogMessage={addDialogMessage}\r\n                    addDialogMessageText={addDialogMessageText}\r\n                    dialogs={dialogs}/>\r\n};\r\n","import {useDispatch as _useDispatch} from \"react-redux\";\r\nimport {ProfileACType} from \"./actions/profileActions\";\r\nimport {DialogsACType} from \"./actions/dialogsActions\";\r\nimport {UsersACType} from \"./actions/usersActions\";\r\n\r\ntype RootActionCreators =\r\n    ProfileACType\r\n    | UsersACType\r\n    | DialogsACType;\r\n\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch();\r\n    return (ActionCreator: RootActionCreators) => dispatch(ActionCreator);\r\n}\r\n","import {USERS_TYPES} from \"../constats/usersConstats\";\r\nimport {UsersType} from \"../reducers/usersReducer\";\r\n\r\nexport type UsersACType =\r\n    ReturnType<typeof showMoreUsers>\r\n    | ReturnType<typeof showNextPageUsers>\r\n    | ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof fetchingFollowEvent>\r\n\r\n\r\nexport const showMoreUsers = (users: Array<UsersType>) => ({\r\n    type: USERS_TYPES.SHOW_MORE_USERS,\r\n    payload: {users}\r\n} as any);\r\nexport const showNextPageUsers = (users: Array<UsersType>) => ({\r\n    type: USERS_TYPES.SHOW_NEXT_USERS,\r\n    payload: {users}\r\n} as any);\r\nexport const unFollowUser = (userId: number) => ({\r\n    type: USERS_TYPES.UN_FOLLOW_USER,\r\n    payload: {userId}\r\n} as any);\r\nexport const followUser = (userId: number) => ({\r\n    type: USERS_TYPES.FOLLOW_USER,\r\n    payload: {userId}\r\n} as any);\r\nexport const setCurrentPage = (page: number) => ({\r\n    type: USERS_TYPES.SET_CURRENT_PAGE,\r\n    payload: {page}\r\n} as any);\r\nexport const setTotalCount = (totalCount: number) => ({\r\n    type: USERS_TYPES.SET_TOTAL_COUNT,\r\n    payload: {totalCount}\r\n} as any);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: USERS_TYPES.TOGGLE_IS_FETCHING,\r\n    payload: {isFetching}\r\n} as any);\r\nexport const fetchingFollowEvent = (isFetching: boolean, userId: number) => ({\r\n    type: USERS_TYPES.TOGGLE_FOLLOW_EVENT,\r\n    payload: {isFetching, userId}\r\n} as any);\r\n\r\nexport const usersAC = {\r\n    showMoreUsers,\r\n    showNextPageUsers,\r\n    followUser,\r\n    unFollowUser,\r\n    setCurrentPage,\r\n    setTotalCount,\r\n    toggleIsFetching,\r\n    fetchingFollowEvent,\r\n};","import {instanceApi} from \"../../api/server\";\r\nimport {usersAC} from \"../actions/usersActions\";\r\n\r\nexport const fetchUsers = (currentPage: number, pageSize: any, switchNextPage: boolean) =>\r\n    async (dispatch: any) => {\r\n        switchNextPage && dispatch(usersAC.toggleIsFetching(true));\r\n\r\n        let data = await instanceApi.getUsers(currentPage, pageSize);\r\n\r\n        if (Array.isArray(data.items) && data.items.length) {\r\n\r\n            switchNextPage && dispatch(usersAC.toggleIsFetching(false));\r\n\r\n            switchNextPage\r\n                ? dispatch(usersAC.showNextPageUsers(data.items))\r\n                : dispatch(usersAC.showMoreUsers(data.items));\r\n\r\n            dispatch(usersAC.setCurrentPage(currentPage));\r\n\r\n            //dispatch(setTotalCount(response.data.totalCount));\r\n            dispatch(usersAC.setTotalCount(200));\r\n        }\r\n    };\r\n\r\nexport const toggleFollowing = (userId: number, toggle: boolean) =>\r\n    async (dispatch: any) => {\r\n\r\n        dispatch(usersAC.fetchingFollowEvent(true, userId));\r\n\r\n        let data = toggle\r\n            ? await instanceApi.followUser(userId)\r\n            : await instanceApi.unFollowUser(userId);\r\n\r\n        if (data.resultCode === 0) {\r\n            toggle\r\n                ? dispatch(usersAC.followUser(userId))\r\n                : dispatch(usersAC.unFollowUser(userId));\r\n        }\r\n\r\n        dispatch(usersAC.fetchingFollowEvent(false, userId));\r\n    };\r\n\r\n\r\n\r\nexport const usersTC = {\r\n    fetchUsers,\r\n    toggleFollowing\r\n};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport css from './User.module.scss';\r\nimport {UsersType} from \"../../../../redux/reducers/usersReducer\";\r\nimport {CustomButton} from \"../../../shared/CustomButton/CustomButton\";\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    followEvent: any[]\r\n    toggleFollowing: (userId: number, toggle: boolean) => any\r\n}\r\n\r\n\r\nexport const User: React.FC<UserPropsType> = React.memo(props => {\r\n\r\n    const {\r\n        user,\r\n        followEvent,\r\n        toggleFollowing\r\n    } = props;\r\n\r\n    const userSmPhoto = user.photos.small !== null\r\n        ? user.photos.small\r\n        : \"/react_social_network/images/user/05.jpg\";\r\n\r\n    const userLgPhoto = user.photos.large !== null\r\n        ? user.photos.large\r\n        : \"/react_social_network/images/page-img/profile-bg1.jpg\";\r\n\r\n    const userStatus = (user.status !== null && user.status !== \"\") ? user.status : \"@designer\";\r\n\r\n    const btnDisabling = followEvent.some(id => id === user.id);\r\n\r\n    const toggleFollowingCallback = () => toggleFollowing(user.id, true);\r\n    const toggleUnFollowingCallback = () => toggleFollowing(user.id, false);\r\n\r\n\r\n    return <li key={user.id} className={css.card}>\r\n        <div className={css.coverContainer}>\r\n            <img\r\n                className={css.coverImg}\r\n                alt=\"cover-img\"\r\n                src={userLgPhoto}/>\r\n        </div>\r\n\r\n        <div className={css.userContainer}>\r\n            <div className={css.userDetails}>\r\n                <div className={css.userImgInner}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img\r\n                            className={css.userImg}\r\n                            alt=\"profile-img\"\r\n                            src={userSmPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n                <div>\r\n                    <NavLink className={css.coverContainer} to={'/profile/' + user.id}>\r\n                        <h4>{user.name}</h4>\r\n                    </NavLink>\r\n\r\n                    <h6>{userStatus}</h6>\r\n                    {/*<p>{user.location.city}, {user.location.country}</p>*/}\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                !user.followed\r\n\r\n                    ? <CustomButton disabled={btnDisabling} onClick={toggleFollowingCallback}>\r\n                        Follow\r\n                    </CustomButton>\r\n\r\n                    : <CustomButton disabled={btnDisabling} onClick={toggleUnFollowingCallback}>\r\n                        UnFollow\r\n                    </CustomButton>\r\n            }\r\n        </div>\r\n    </li>\r\n});\r\n","import React from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {User} from \"./User/User\";\r\nimport {UsersType} from \"../../../redux/reducers/usersReducer\";\r\nimport {CustomButton} from \"../../shared/CustomButton/CustomButton\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    followEvent: any[]\r\n    loadNextCallback: (pagesIndex: number) => void\r\n    loadMoreCallback: (pagesIndex: number) => void\r\n    toggleFollowing: (userId: number, toggle: boolean) => any\r\n}\r\nexport const Users: React.FC<UsersPropsType> = React.memo(props => {\r\n\r\n    const  {\r\n        users,\r\n        pageSize,\r\n        totalCount,\r\n        currentPage,\r\n        followEvent,\r\n        loadNextCallback,\r\n        loadMoreCallback,\r\n        toggleFollowing,\r\n    } = props;\r\n\r\n    const propsTotal = !totalCount ? 0 : totalCount;\r\n    const propsPageSize = (!pageSize || pageSize === 0) ? 1 : pageSize;\r\n\r\n    const pagesCnt = Math.ceil(propsTotal / propsPageSize);\r\n    const pagesIndexes = [];\r\n    for (let i = 1; i <= pagesCnt; i++) pagesIndexes.push(i);\r\n\r\n    const pages = //Array.isArray(pagesIndexes) && pagesIndexes.length &&\r\n        pagesIndexes.map((pagesIndex: number) => {\r\n            const loadNext = () => loadNextCallback(pagesIndex);\r\n\r\n            return currentPage === pagesIndex\r\n                ? <strong key={pagesIndex}>{pagesIndex}-</strong>\r\n                : <small key={pagesIndex} onClick={loadNext}>{pagesIndex}-</small>\r\n        });\r\n\r\n    let leftColumn: JSX.Element[] = [];\r\n    let rightColumn: JSX.Element[] = [];\r\n\r\n    Array.isArray(users) && users.length &&\r\n        users.map((user: UsersType, index: number) => {\r\n\r\n            const current = <User key={user.id}\r\n                                  user={user}\r\n                                  followEvent={followEvent}\r\n                                  toggleFollowing={toggleFollowing}/>;\r\n\r\n            index % 2 === 0 ? leftColumn.push(current) : rightColumn.push(current)\r\n        });\r\n\r\n    const loadMore = () => loadMoreCallback(currentPage + 1);\r\n\r\n    return  <>\r\n\r\n        <div>{pages}</div>\r\n\r\n        <Grid container item xs={12} spacing={2}>\r\n            <Grid item xs={6}><ul>{leftColumn}</ul></Grid>\r\n\r\n            <Grid item xs={6}><ul>{rightColumn}</ul></Grid>\r\n        </Grid>\r\n\r\n        <CustomButton onClick={loadMore}>Get users</CustomButton>\r\n    </>;\r\n});","import React from \"react\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/actions/usersActions\";\r\nimport {UsersState} from \"../../../redux/reducers/usersReducer\";\r\nimport {usersTC} from \"../../../redux/thunk/usersThunk\";\r\nimport {PreLoader} from \"../../shared/PreLoader/PreLoader\";\r\nimport {Users} from \"../../presentational/Users/Users\";\r\n\r\n\r\nclass UsersContainer extends React.Component<TProps> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.fetchUsers(currentPage, pageSize, true);\r\n    };\r\n\r\n    loadNextCallback  = (pagesIndex: number) => {\r\n        const pageSize = this.props;\r\n        this.props.fetchUsers(pagesIndex, pageSize, true);\r\n    };\r\n    loadMoreCallback= (pagesIndex: number) => {\r\n        const pageSize = this.props;\r\n        this.props.fetchUsers(pagesIndex, pageSize, false);\r\n    };\r\n    toggleFollowing = (userId: number, toggle: boolean) => this.props.toggleFollowing(userId, toggle);\r\n\r\n    render() {\r\n\r\n        const {\r\n            isFetching,\r\n            users,\r\n            currentPage,\r\n            pageSize,\r\n            totalCount,\r\n            followEvent,\r\n        } = this.props;\r\n\r\n        return (\r\n            isFetching\r\n                ? <PreLoader/>\r\n                : <Users\r\n                    users={users}\r\n                    pageSize={pageSize}\r\n                    totalCount={totalCount}\r\n                    currentPage={currentPage}\r\n                    followEvent={followEvent}\r\n                    loadNextCallback={this.loadNextCallback}\r\n                    loadMoreCallback={this.loadMoreCallback}\r\n                    toggleFollowing={this.toggleFollowing}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({users}: { users: UsersState }): UsersState => {\r\n    return {\r\n        users: users.users,\r\n        pageSize: users.pageSize,\r\n        totalCount: users.totalCount,\r\n        currentPage: users.currentPage,\r\n        isFetching: users.isFetching,\r\n        followEvent: users.followEvent,\r\n    }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    followUserAC: usersAC.followUser,\r\n    unFollowUserAC: usersAC.unFollowUser,\r\n    setCurrentPageAC: usersAC.setCurrentPage,\r\n\r\n    fetchUsers: usersTC.fetchUsers,\r\n    toggleFollowing: usersTC.toggleFollowing,\r\n});\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(UsersContainer);","import React from 'react';\r\nimport {Route} from \"react-router\";\r\nimport HeaderContainer from \"./components/containers/Header/HeaderContainer\";\r\nimport {SidebarContainer} from \"./components/containers/Sidebar/SidebarContainer\";\r\nimport ProfileContainer from \"./components/containers/Profile/ProfileContainer\";\r\nimport {DialogsContainer} from \"./components/containers/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/containers/Users/UsersContainer\";\r\nimport css from './App.module.scss';\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    return <div className=\"app-inner\">\r\n        <HeaderContainer/>\r\n\r\n        <div className=\"wrapper\">\r\n\r\n            <main className={css.main}>\r\n                <SidebarContainer/>\r\n\r\n                <div className={css.content}>\r\n                    <Route path=\"/profile/:userId\"\r\n                           render={() =>\r\n                               <ProfileContainer/>\r\n                           }/>\r\n\r\n                    <Route path=\"/dialogs\"\r\n                           render={() =>\r\n                               <DialogsContainer/>\r\n                           }/>\r\n\r\n                    <Route path=\"/users\"\r\n                           render={() =>\r\n                               <UsersContainer/>\r\n                           }/>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    </div>\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {App} from \"./App\";\r\nimport './index.scss';\r\n\r\nlet reRenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n        , document.getElementById('root')\r\n    );\r\n};\r\n\r\nreRenderEntireTree();\r\n\r\nstore.subscribe(reRenderEntireTree);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}